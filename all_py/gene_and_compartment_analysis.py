#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import re
import sys
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# MODIFIED: Import the required statistical test
from scipy.stats import mannwhitneyu, wilcoxon

from IO import ReadCompartmentScores

def parse_bin_gene_map(map_file):
    """
    Parses bedtools intersect output to create a dictionary mapping
    a 0-based bin index to a list of gene names within that bin.
    """
    # ... [This function remains exactly the same as the previous version] ...
    bin_to_gene = {}
    print(f"Parsing bin-to-gene map from '{map_file}'...")
    try:
        with open(map_file, 'r') as f:
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) < 13: continue
                feature_type = parts[6]
                if feature_type != 'gene': continue
                bin_id_str = parts[3]
                try:
                    bin_index = int(bin_id_str.split('_')[1]) - 1
                except (ValueError, IndexError):
                    continue
                attributes_str = parts[12] 
                match = re.search(r'gene_name "([^"]+)"', attributes_str)
                if match:
                    gene_name = match.group(1)
                    if bin_index not in bin_to_gene:
                        bin_to_gene[bin_index] = set()
                    bin_to_gene[bin_index].add(gene_name)
    except FileNotFoundError:
        print(f"Error: Bin-gene map file not found at '{map_file}'")
        sys.exit(1)
    for bin_index in bin_to_gene:
        bin_to_gene[bin_index] = list(bin_to_gene[bin_index])
    print(f"Done. Found genes in {len(bin_to_gene)} unique bins.")
    return bin_to_gene

def main():
    parser = argparse.ArgumentParser(description="Correlate compartment switches with gene expression changes.")
    # ... [Argument parsing remains the same] ...
    parser.add_argument('--bin-gene-map', required=True, help="Path to the bin-to-gene map file generated by bedtools.")
    parser.add_argument('--rna-seq', required=True, help="Path to the differential RNA-seq results (.csv or .tsv).")
    parser.add_argument('--scores1', required=True, help="Path to the c-score file for the first condition (e.g., GM12878).")
    parser.add_argument('--scores2', required=True, help="Path to the c-score file for the second condition (e.g., K562).")
    parser.add_argument('--name1', default="Cond1", help="Name of the first condition for plot labels (e.g., GM12878).")
    parser.add_argument('--name2', default="Cond2", help="Name of the second condition for plot labels (e.g., K562).")
    parser.add_argument('--skip-range', nargs=2, type=int, metavar=('START', 'END'), help="1-based bin range to skip from the original, un-filtered bin list (e.g., centromere).")
    parser.add_argument('-t', '--threshold', type=float, default=0.1, help="Absolute c-score threshold for A/B definition. Default: 0.1")
    parser.add_argument('-o', '--output', default="compartment_switch_expression.png", help="Output plot file name.")
    
    args = parser.parse_args()

    # --- Steps 1-4 remain the same ---
    bin_to_gene = parse_bin_gene_map(args.bin_gene_map)
    if not bin_to_gene: sys.exit("\nError: No genes found. Check chromosome naming ('chr1' vs '1').")
    
    print("Loading and processing compartment scores...")
    scores1_raw = ReadCompartmentScores(args.scores1); scores2_raw = ReadCompartmentScores(args.scores2)
    
    print("Categorizing compartment switches for all theoretical bins...")
    num_total_bins = max(len(scores1_raw), len(scores2_raw))
    bin_categories_raw = []
    for i in range(num_total_bins):
        s1 = scores1_raw[i] if i < len(scores1_raw) else 0; s2 = scores2_raw[i] if i < len(scores2_raw) else 0
        state1 = 'A' if s1 > args.threshold else ('B' if s1 < -args.threshold else 'T')
        state2 = 'A' if s2 > args.threshold else ('B' if s2 < -args.threshold else 'T')
        if state1 == 'A' and state2 == 'A': bin_categories_raw.append('Stable A')
        elif state1 == 'B' and state2 == 'B': bin_categories_raw.append('Stable B')
        elif state1 == 'A' and state2 == 'B': bin_categories_raw.append('A -> B')
        elif state1 == 'B' and state2 == 'A': bin_categories_raw.append('B -> A')
        else: bin_categories_raw.append('Other/Transition')
    
    print("Associating with RNA-seq data...")
    try:
        de_results_df = pd.read_csv(args.rna_seq)
        de_map = pd.Series(de_results_df.log2FoldChange.values, index=de_results_df.gene_name).to_dict()
    except Exception as e:
        print(f"Error reading RNA-seq file '{args.rna_seq}': {e}"); sys.exit(1)

    results = { cat: [] for cat in ['Stable A', 'Stable B', 'A -> B', 'B -> A', 'Other/Transition']}
    for bin_index, genes_in_bin in bin_to_gene.items():
        if bin_index < len(bin_categories_raw):
            category = bin_categories_raw[bin_index]
            for gene in genes_in_bin:
                if gene in de_map:
                    results[category].append(de_map[gene])

    results = {k: v for k, v in results.items() if v}
    order = [cat for cat in ['Stable B', 'A -> B', 'Other/Transition', 'Stable A', 'B -> A'] if cat in results]

    # --- 步骤 5: 统计验证与可视化 (CORRECTED LOGIC) ---
    print("Generating plot and statistics...")
    plot_data = [{'Category': cat, 'log2FoldChange': fc} for cat, fc_list in results.items() for fc in fc_list]
    if not plot_data: sys.exit("\nError: No gene expression data could be matched. Analysis cannot proceed.")
    plot_df = pd.DataFrame(plot_data)

    plt.figure(figsize=(12, 8))
    order = ['Stable B', 'A -> B', 'Other/Transition', 'Stable A', 'B -> A']
    sns.boxplot(data=plot_df, x='Category', y='log2FoldChange', order=order,
                palette={'Stable B':'lightblue', 'A -> B':'blue', 'Stable A':'lightcoral', 
                         'B -> A':'red', 'Other/Transition':'lightgray'})
    plt.axhline(0, color='black', linestyle='--')
    title = f'Gene Expression Changes vs. Compartment Switches ({args.name1} to {args.name2})'
    plt.title(title, fontsize=16)
    plt.ylabel(f'log2 Fold Change ({args.name2} / {args.name1})', fontsize=12)
    plt.xlabel('Compartment Category', fontsize=12)
    
    # --- Corrected Statistical Analysis Part ---
    print("\n--- Statistical Test Results ---")
    
    # Left corner: Intra-group tests (vs 0)
    intra_group_stats = []
    print("Intra-group Wilcoxon signed-rank test (median vs 0):")
    for cat in ['A -> B', 'B -> A']:
        if cat in results and len(results[cat]) > 1:
            non_zero_data = [x for x in results[cat] if x != 0]
            if len(non_zero_data) > 1:
                _, p_val = wilcoxon(non_zero_data)
                intra_group_stats.append(f"{cat}: p={p_val:.2e}")
                print(f"  {cat}: p-value = {p_val:.2e}")

    stats_text_left = "Median log2FC vs 0:\n" + "\n".join(intra_group_stats)
    plt.figtext(0.02, 0.01, stats_text_left, ha="left", fontsize=10, va="bottom")

    # Right corner: Inter-group tests (vs starting environment)
    inter_group_stats = []
    print("Inter-group Mann-Whitney U test (vs starting environment):")
    if 'A -> B' in results and 'Stable A' in results: # Correct comparison
        _, p_val_ab = mannwhitneyu(results['A -> B'], results['Stable A'], alternative='two-sided')
        inter_group_stats.append(f"A->B vs Stable A: p={p_val_ab:.2e}")
        print(f"  A->B vs Stable A: p-value = {p_val_ab:.2e}")
    if 'B -> A' in results and 'Stable B' in results: # Correct comparison
        _, p_val_ba = mannwhitneyu(results['B -> A'], results['Stable B'], alternative='two-sided')
        inter_group_stats.append(f"B->A vs Stable B: p={p_val_ba:.2e}")
        print(f"  B->A vs Stable B: p-value = {p_val_ba:.2e}")

    stats_text_right = "Comparison vs Start State:\n" + "\n".join(inter_group_stats)
    plt.figtext(0.98, 0.01, stats_text_right, ha="right", fontsize=10, va="bottom")

    plt.savefig(args.output, dpi=300, bbox_inches='tight')
    print(f"\nAnalysis complete. Plot saved to '{args.output}'")

if __name__ == "__main__":
    main()