#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import re
import sys
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import mannwhitneyu
from IO import ReadCompartmentScores

def parse_bin_gene_map(map_file):
    """解析bedtools的输出，创建 bin -> [genes] 的映射字典"""
    bin_to_gene = {}
    print(f"Parsing bin-to-gene map from '{map_file}'...")
    try:
        with open(map_file, 'r') as f:
            for line in f:
                parts = line.strip().split('\t')
                # A line from `bedtools intersect -wa -wb` has at least 4 (from A) + 9 (from B) = 13 columns
                if len(parts) < 13: continue
                
                # CORRECTED: The GTF's feature type (col 3) is now at a new position
                # Bin file has 4 cols (0,1,2,3), so GTF starts at col 4.
                # Feature type is at index (4 + 3 - 1) = 6
                feature_type = parts[6]
                if feature_type != 'gene':
                    continue

                bin_id_str = parts[3] # This is correct, it's the 4th column of the line
                bin_index = int(bin_id_str.split('_')[1]) - 1
                
                # CORRECTED: The GTF's attributes (col 9) are also at a new position
                # Attributes are at index (4 + 9 - 1) = 12
                attributes_str = parts[12] 
                match = re.search(r'gene_name "([^"]+)"', attributes_str)
                if match:
                    gene_name = match.group(1)
                    if bin_index not in bin_to_gene:
                        bin_to_gene[bin_index] = set()
                    bin_to_gene[bin_index].add(gene_name)

    except FileNotFoundError:
        print(f"Error: Bin-gene map file not found at '{map_file}'")
        sys.exit(1)

    for bin_index in bin_to_gene:
        bin_to_gene[bin_index] = list(bin_to_gene[bin_index])
    print(f"Done. Found genes in {len(bin_to_gene)} bins.")
    return bin_to_gene

def main():
    # ... The rest of the main function is exactly the same as the previous version ...
    # --- 1. 设置命令行参数 ---
    parser = argparse.ArgumentParser(description="Correlate compartment switches with gene expression changes.")
    parser.add_argument('--bin-gene-map', required=True, help="Path to the bin-to-gene map file generated by bedtools.")
    parser.add_argument('--rna-seq', required=True, help="Path to the differential RNA-seq results (.csv or .tsv).")
    parser.add_argument('--scores1', required=True, help="Path to the c-score file for the first condition (e.g., GM12878).")
    parser.add_argument('--scores2', required=True, help="Path to the c-score file for the second condition (e.g., K562).")
    parser.add_argument('--name1', default="Cond1", help="Name of the first condition for plot labels (e.g., GM12878).")
    parser.add_argument('--name2', default="Cond2", help="Name of the second condition for plot labels (e.g., K562).")
    parser.add_argument('--skip-range', nargs=2, type=int, metavar=('START', 'END'), help="1-based bin range to skip (e.g., centromere).")
    parser.add_argument('-t', '--threshold', type=float, default=0.1, help="Absolute c-score threshold for A/B definition. Default: 0.1")
    parser.add_argument('-o', '--output', default="compartment_switch_expression.png", help="Output plot file name.")
    
    args = parser.parse_args()

    # --- 步骤 1: 创建Bin-Gene映射 ---
    bin_to_gene = parse_bin_gene_map(args.bin_gene_map)

    if not bin_to_gene:
        print("\nError: No genes were found in any bins. This is likely due to:")
        print("1. A chromosome naming mismatch ('chr1' vs '1') between your bin file and GTF file.")
        print("2. The 'bedtools intersect' command producing an empty output file.")
        print("Please check your input files and re-run bedtools intersect.")
        sys.exit(1)

    # --- 步骤 2: 加载并处理区室分数 ---
    print("Loading and processing compartment scores...")
    scores1_raw = ReadCompartmentScores(args.scores1)
    scores2_raw = ReadCompartmentScores(args.scores2)

    if args.skip_range:
        start_idx, end_idx = args.skip_range[0] - 1, args.skip_range[1] - 1
        scores1 = scores1_raw[:start_idx] + scores1_raw[end_idx + 1:]
        scores2 = scores2_raw[:start_idx] + scores2_raw[end_idx + 1:]
    else:
        scores1, scores2 = scores1_raw, scores2_raw

    min_len = min(len(scores1), len(scores2))
    scores1 = np.array(scores1[:min_len])
    scores2 = np.array(scores2[:min_len])
    print(f"Final bin count after filtering and truncation: {min_len}")

    # --- 步骤 3: 识别区室变化 ---
    print("Categorizing compartment switches...")
    bin_categories = []
    for s1, s2 in zip(scores1, scores2):
        state1 = 'A' if s1 > args.threshold else ('B' if s1 < -args.threshold else 'T')
        state2 = 'A' if s2 > args.threshold else ('B' if s2 < -args.threshold else 'T')
        
        if state1 == 'A' and state2 == 'A': bin_categories.append('Stable A')
        elif state1 == 'B' and state2 == 'B': bin_categories.append('Stable B')
        elif state1 == 'A' and state2 == 'B': bin_categories.append('A -> B')
        elif state1 == 'B' and state2 == 'A': bin_categories.append('B -> A')
        else: bin_categories.append('Other/Transition')
    
    # --- 步骤 4: 关联基因表达变化 ---
    print("Associating with RNA-seq data...")
    try:
        de_results_df = pd.read_csv(args.rna_seq)
        de_map = pd.Series(de_results_df.log2FoldChange.values, index=de_results_df.gene_name).to_dict()
    except FileNotFoundError:
        print(f"Error: RNA-seq results file not found at '{args.rna_seq}'")
        sys.exit(1)
    except KeyError:
        print("Error: The RNA-seq file must contain columns named 'gene_name' and 'log2FoldChange'. Please check your file.")
        sys.exit(1)

    results = { cat: [] for cat in ['Stable A', 'Stable B', 'A -> B', 'B -> A', 'Other/Transition']}
    for bin_index, category in enumerate(bin_categories):
        if bin_index in bin_to_gene:
            for gene in bin_to_gene[bin_index]:
                if gene in de_map:
                    results[category].append(de_map[gene])

    # --- 步骤 5: 统计验证与可视化 ---
    print("Generating plot and statistics...")
    plot_data = [{'Category': cat, 'log2FoldChange': fc} for cat, fc_list in results.items() for fc in fc_list]
    plot_df = pd.DataFrame(plot_data)

    plt.figure(figsize=(12, 8))
    order = ['Stable B', 'A -> B', 'Other/Transition', 'Stable A', 'B -> A']
    sns.boxplot(data=plot_df, x='Category', y='log2FoldChange', order=order,
                palette={'Stable B':'lightblue', 'A -> B':'blue', 'Stable A':'lightcoral', 
                         'B -> A':'red', 'Other/Transition':'lightgray'})
    plt.axhline(0, color='black', linestyle='--')
    title = f'Gene Expression Changes vs. Compartment Switches ({args.name1} to {args.name2})'
    plt.title(title, fontsize=16)
    plt.ylabel(f'log2 Fold Change ({args.name2} / {args.name1})', fontsize=12)
    plt.xlabel('Compartment Category', fontsize=12)
    
    try:
        u_stat_ab, p_val_ab = mannwhitneyu(results['A -> B'], results['Stable B'], alternative='two-sided')
        u_stat_ba, p_val_ba = mannwhitneyu(results['B -> A'], results['Stable A'], alternative='two-sided')
        stats_text = f"P-values (Mann-Whitney U):\nA->B vs Stable B: p={p_val_ab:.2e}\nB->A vs Stable A: p={p_val_ba:.2e}"
        print("\n--- Statistical Test Results ---")
        print(stats_text.replace('\n', '\n  '))
        plt.figtext(0.1, 0.01, stats_text, ha="left", fontsize=10)
    except ValueError as e:
        print(f"\nCould not perform statistical test. One of the categories might be empty. Error: {e}")

    plt.savefig(args.output, dpi=300, bbox_inches='tight')
    print(f"\nAnalysis complete. Plot saved to '{args.output}'")
    
if __name__ == "__main__":
    main()