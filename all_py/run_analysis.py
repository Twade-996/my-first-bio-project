#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import re
import sys
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import mannwhitneyu, wilcoxon

from IO import ReadCompartmentScores

def parse_bin_gene_map(map_file):
    """解析bedtools的输出，创建 bin -> [genes] 的映射字典"""
    bin_to_gene = {}
    print(f"Parsing bin-to-gene map from '{map_file}'...")
    try:
        with open(map_file, 'r') as f:
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) < 13 or parts[6] != 'gene':
                    continue
                bin_id_str = parts[3]
                bin_index = int(bin_id_str.split('_')[1]) - 1
                attributes_str = parts[12]
                match = re.search(r'gene_name "([^"]+)"', attributes_str)
                if match:
                    gene_name = match.group(1)
                    if bin_index not in bin_to_gene:
                        bin_to_gene[bin_index] = set()
                    bin_to_gene[bin_index].add(gene_name)
    except FileNotFoundError:
        print(f"Error: Bin-gene map file not found at '{map_file}'"); sys.exit(1)

    for bin_index in bin_to_gene:
        bin_to_gene[bin_index] = list(bin_to_gene[bin_index])
    print(f"Done. Found genes in {len(bin_to_gene)} bins.")
    return bin_to_gene

def main():
    parser = argparse.ArgumentParser(description="Correlate compartment switches with gene expression changes.")
    parser.add_argument('--bin-gene-map', required=True, help="Path to the bin-to-gene map file generated by bedtools.")
    parser.add_argument('--rna-seq', required=True, help="Path to the differential RNA-seq results (.csv or .tsv).")
    parser.add_argument('--scores1', required=True, help="Path to the c-score file for the first condition.")
    parser.add_argument('--scores2', required=True, help="Path to the c-score file for the second condition.")
    parser.add_argument('--name1', default="Cond1", help="Name of the first condition for plot labels.")
    parser.add_argument('--name2', default="Cond2", help="Name of the second condition for plot labels.")
    parser.add_argument('--skip-range', nargs=2, type=int, metavar=('S', 'E'), help="1-based bin range to skip.")
    parser.add_argument('-t', '--threshold', type=float, default=0.1, help="Absolute c-score threshold. Default: 0.1")
    parser.add_argument('-o', '--output', default="compartment_switch_expression.png", help="Output plot file name.")
    args = parser.parse_args()

    bin_to_gene = parse_bin_gene_map(args.bin_gene_map)
    if not bin_to_gene:
        print("\nError: No genes found. Check for chromosome naming mismatch ('chr1' vs '1')."); sys.exit(1)

    print("Loading and processing compartment scores...")
    scores1_raw, scores2_raw = ReadCompartmentScores(args.scores1), ReadCompartmentScores(args.scores2)
    if args.skip_range:
        start_idx, end_idx = args.skip_range[0] - 1, args.skip_range[1] - 1
        scores1, scores2 = scores1_raw[:start_idx] + scores1_raw[end_idx + 1:], scores2_raw[:start_idx] + scores2_raw[end_idx + 1:]
    else:
        scores1, scores2 = scores1_raw, scores2_raw
    min_len = min(len(scores1), len(scores2))
    scores1, scores2 = np.array(scores1[:min_len]), np.array(scores2[:min_len])

    print("Categorizing compartment switches...")
    bin_categories = []
    for s1, s2 in zip(scores1, scores2):
        state1 = 'A' if s1 > args.threshold else ('B' if s1 < -args.threshold else 'T')
        state2 = 'A' if s2 > args.threshold else ('B' if s2 < -args.threshold else 'T')
        if state1 == 'A' and state2 == 'A': bin_categories.append('Stable A')
        elif state1 == 'B' and state2 == 'B': bin_categories.append('Stable B')
        elif state1 == 'A' and state2 == 'B': bin_categories.append('A -> B')
        elif state1 == 'B' and state2 == 'A': bin_categories.append('B -> A')
        else: bin_categories.append('Other/Transition')
    
    print("Associating with RNA-seq data...")
    try:
        de_results_df = pd.read_csv(args.rna_seq)
        de_map = pd.Series(de_results_df.log2FoldChange.values, index=de_results_df.gene_name).to_dict()
    except Exception as e:
        print(f"Error reading RNA-seq file: {e}. Ensure it's a CSV with 'gene_name' and 'log2FoldChange' columns."); sys.exit(1)
        
    results = { cat: [] for cat in ['Stable A', 'Stable B', 'A -> B', 'B -> A', 'Other/Transition']}
    for bin_index, category in enumerate(bin_categories):
        if bin_index in bin_to_gene:
            for gene in bin_to_gene[bin_index]:
                if gene in de_map: results[category].append(de_map[gene])

    print("Generating plot and statistics...")
    plot_data = [{'Category': cat, 'log2FoldChange': fc} for cat, fc_list in results.items() for fc in fc_list]
    plot_df = pd.DataFrame(plot_data)

    plt.figure(figsize=(12, 8))
    order = ['Stable B', 'A -> B', 'Other/Transition', 'Stable A', 'B -> A']
    sns.boxplot(data=plot_df, x='Category', y='log2FoldChange', order=order,
                palette={'Stable B':'lightblue', 'A -> B':'blue', 'Stable A':'lightcoral', 
                         'B -> A':'red', 'Other/Transition':'lightgray'})
    plt.axhline(0, color='black', linestyle='--')
    plt.title(f'Gene Expression Changes vs. Compartment Switches ({args.name1} to {args.name2})', fontsize=16)
    plt.ylabel(f'log2 Fold Change ({args.name2} / {args.name1})', fontsize=12)
    plt.xlabel('Compartment Category', fontsize=12)
    
    # --- MODIFIED: Split P-value text blocks for better layout ---
    print("\n--- Statistical Test Results ---")
    text_bg = dict(facecolor='white', alpha=0.7, edgecolor='none', pad=2)

    # 1. Two-sample tests (Relative comparison) -> BOTTOM LEFT
    mw_lines = ["Two-sample (Mann-Whitney U):"]
    try:
        _, p_val_ab = mannwhitneyu(results['A -> B'], results['Stable B'], alternative='two-sided')
        mw_lines.append(f"  A->B vs Stable B: p={p_val_ab:.2e}")
    except ValueError: mw_lines.append("  A->B vs Stable B: N/A")
    try:
        _, p_val_ba = mannwhitneyu(results['B -> A'], results['Stable A'], alternative='two-sided')
        mw_lines.append(f"  B->A vs Stable A: p={p_val_ba:.2e}")
    except ValueError: mw_lines.append("  B->A vs Stable A: N/A")
    
    mw_text = "\n".join(mw_lines)
    print(mw_text)
    plt.figtext(0.13, 0.01, mw_text, ha="left", fontsize=10, va="bottom", bbox=text_bg)

    # 2. One-sample tests (Absolute effect vs 0) -> BOTTOM RIGHT
    wilcoxon_lines = ["One-sample (Wilcoxon Signed-Rank):"]
    try:
        _, p_val_ab_zero = wilcoxon(results['A -> B'], alternative='greater')
        wilcoxon_lines.append(f"  A->B vs 0: p={p_val_ab_zero:.2e}")
    except ValueError: wilcoxon_lines.append("  A->B vs 0: N/A")
    try:
        _, p_val_ba_zero = wilcoxon(results['B -> A'], alternative='two-sided')
        wilcoxon_lines.append(f"  B->A vs 0: p={p_val_ba_zero:.2e}")
    except ValueError: wilcoxon_lines.append("  B->A vs 0: N/A")

    wilcoxon_text = "\n".join(wilcoxon_lines)
    print(wilcoxon_text)
    plt.figtext(0.9, 0.01, wilcoxon_text, ha="right", fontsize=10, va="bottom", bbox=text_bg)

    plt.savefig(args.output, dpi=300, bbox_inches='tight')
    print(f"\nAnalysis complete. Plot saved to '{args.output}'")
    
if __name__ == "__main__":
    main()